{"name":"Bigdata Ready Enterprise","tagline":"Making Bigdata Easy For Enterprise","body":"# Bigdata Ready Enterprise Open Source Software\r\n\r\nReleased under Apache Public License 2.0. You can get a copy for the license at http://www.apache.org/licenses/LICENSE-2.0.\r\n\r\n## Overview\r\n\r\nThis document will help you build BDRE from source. Audience for this document are developers and architects who want be part of BDRE framework development or may just want to test it by running the UI. Install Git, Maven and Oracle JDK 7(and up) if you haven't already. In Windows be sure to add git and other bash tools in the commandline path during installation. In this example, we are going to use *HortonWorks Sandbox* with *VirtualBox* software because all the required software are mostly installed and configured. BDRE is shipped with an embedded database which is okay for running the UI and evaluating and testing jobs in a single node cluster. For production use BDRE currently supports following production scale databases.\r\n\r\n  - MySQL Server\r\n  - Oracle 11g Server\r\n  - PostgreSql\r\n\r\n In this guide we are going to show you how to build and install BDRE in a CentOS VM with a MySQL database. You should be able to do the same in Mac or Windows but note that setting up a Hadoop cluster might be tricky in Windows and might more involvement. You should be able to launch the BDRE user interface in Windows and design various jobs. However to deploy and run the jobs we recommend a Linux system with Hadoop installed. BDRE is typically installed in Hadoop edge node in a multi-node cluster.\r\n\r\n\r\n## Preparation\r\n\r\n* Download and install VirtualBox from https://www.virtualbox.org/\r\n* Download and install HortonWorks Sandbox 2.2 Virtual Box image from http://hortonworks.com/products/releases/hdp-2-2/#install \r\n* Setup a 'Host-Only Adapter' for network to enable communication between Host and Guest OS.\r\n* Now ssh into the sandbox using *root@VM_IP* (password hadoop)\r\n    - The VM_IP is usually something between 192.168.56.101 - 192.168.56.109 \r\n* Start Oozie as the Oozie user and Oozie isn't already started. ```ps -ef | grep -i oozie``` will help determine status of Oozie.\r\n\r\n    ```shell\r\n    su - oozie -c \"/usr/hdp/current/oozie-server/bin/oozie-start.sh\"\r\n    ps -ef | grep -i oozie\r\n    ```\r\n* Now create *openbdre* user account.\r\n\r\n    ```shell\r\n    [root@sandbox ~]# adduser -m -s /bin/bash openbdre\r\n    [root@sandbox ~]# passwd openbdre\r\n    Changing password for user openbdre.\r\n    New password:\r\n    Retype new password:\r\n    passwd: all authentication tokens updated successfully.\r\n    ```\r\n* As root edit /etc/sudoers and allow openbdre to perform `sudo`. Below will do it\r\n\r\n    ```shell\r\n    echo \"openbdre ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\r\n    ```\r\n    \r\n* Login to the HDP Sandbox with the newly created openbdre user. You can perform a **su openbdre** to switch to this account. Please make sure you are not root user beyond this point.\r\n\r\n    ```shell\r\n    [root@sandbox ~]# su openbdre\r\n    [openbdre@sandbox root]$ cd ~\r\n    [openbdre@sandbox ~]$\r\n    ```\r\n    \r\n* Download Maven from a mirror, unpack and add to the PATH.\r\n\r\n    ```shell\r\n    [openbdre@sandbox ~]# wget http://www.us.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip\r\n    [openbdre@sandbox ~]# unzip apache-maven-3.3.9-bin.zip\r\n    [openbdre@sandbox ~]# export PATH=$PATH:/home/openbdre/apache-maven-3.3.9/bin\r\n    ```\r\n    \r\n## Building BDRE from source\r\n\r\n1. Obtain the source code\r\n * cd to the home directory of openbdre.\r\n\r\n    ```shell\r\n    [openbdre@sandbox ~]# cd ~\r\n    ```\r\n\r\n * Pull BDRE source from this git repository. To find out your repository link navigate to the repository in this website and copy the https repo URL.\r\n   \r\n    ```shell\r\n    [openbdre@sandbox ~]# git clone https://github.com/WiproOpenSourcePractice/openbdre.git\r\n    ```\r\n\r\n * cd to the cloned source dir (so you can be in /home/openbdre/openbdre)\r\n\r\n    ```shell\r\n    [openbdre@sandbox ~]# cd openbdre\r\n    ```\r\n\r\n2. Database Setup \r\n    * Execute the dbsetup.sh script without any parameters as shown below. In this example, we are going to use MySQL as BDRE backend as it's already available in the HDP Sandbox. If you would like to use another database please select it accordingly.\r\n    \r\n    ```shell\r\n    [openbdre@sandbox ~]# sh dbsetup.sh\r\n    ```\r\n\r\n    ```shell\r\n    [openbdre@sandbox openbdre]$ sh dbsetup.sh⏎\r\n    Supported DB\r\n    1) Embedded (Default - Good for running BDRE user interface only. )\r\n    2) Oracle\r\n    3) MySQL\r\n    4) PostgreSQL\r\n    \r\n    Select Database Type(Enter 1, 2, 3 , 4 or leave empty and press empty to select the default DB):3⏎\r\n    \r\n    Enter DB username (Type username or leave it blank for default 'root'):⏎\r\n    Enter DB password (Type password or leave it blank for default '<blank>'):⏎\r\n    Enter DB hostname (Type db hostname or leave it blank for default 'localhost'):⏎\r\n    Enter DB port (Type db port or leave it blank for default '3306'):⏎\r\n    Enter DB name (Type db name or leave it blank for default 'bdre'):⏎\r\n    Enter DB schema (Type schema or leave it blank for default 'bdre'):⏎\r\n    Please confirm:\r\n    \r\n    Database Type: mysql\r\n    JDBC Driver Class: com.mysql.jdbc.Driver\r\n    JDBC Connection URL: jdbc:mysql://localhost:3306/bdre\r\n    Database Username: root\r\n    Database Password:\r\n    Hibernate Dialect: org.hibernate.dialect.MySQLDialect\r\n    Database Schema: bdre\r\n    Are those correct? (type y or n - default y):y⏎\r\n    Database configuration written to ./md-dao/src/main/resources/db.properties\r\n    Will create DB and tables\r\n    Tables created successfully in MySQL bdre DB\r\n    ```\r\n    \r\n3. Building\r\n * Now build BDRE using (note BDRE may not compile if the **settings.xml** is not passed from the commandline so be sure to use the *-s* option. When building for the first time, it might take a while as maven resolves and downloads the jar libraries from diffrent repositories.\r\n    \r\n    ```shell\r\n    mvn -s settings.xml clean install -P hdp22\r\n    ```\r\n * *Note:* Selecting hdp22 will compile BDRE with HDP 2.2 libraries and automatically configure BDRE with Hortonworks Sandbox 2.2.0. Similarly one should be able to build this using -P cdh52 which will configure BDRE for CDH 5.2 Quickstart VM. During building it'll pickup the environment specific configurations from <source root>/databases/setup/profile.*hdp22*.properties.\r\n \r\n    Content of databases/setup/profile.hdp22.properties\r\n ```properties\r\n    bdre_user_name=openbdre\r\n    name_node_hostname=sandbox.hortonworks.com\r\n    name_node_port=8020\r\n    job_tracker_port=8050\r\n    flume_path=/usr/hdp/current/flume-server\r\n    oozie_host=sandbox.hortonworks.com\r\n    oozie_port=11000\r\n    thrift_hostname=sandbox.hortonworks.com\r\n    hive_server_hostname=sandbox.hortonworks.com\r\n    drools_hostname=sandbox.hortonworks.com\r\n    hive_jdbc_user=openbdre\r\n    hive_jdbc_password=openbdre\r\n ```\r\n    \r\n    ```shell\r\n    $ mvn -s settings.xml clean install -P hdp22\r\n    [INFO] Scanning for projects...\r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] Reactor Build Order:\r\n        .......blah blah.........\r\n        .......blah blah.........\r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] BUILD SUCCESS\r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] Total time: 3:39.479s\r\n    [INFO] Finished at: Wed Dec 30 01:50:02 PST 2015\r\n    [INFO] Final Memory: 127M/2296M\r\n    [INFO] ------------------------------------------------------------------------\r\n    ```\r\n\r\n4. Installing BDRE\r\n * After building BDRE successfully run \r\n    \r\n    ```shell\r\n    sh install-scripts.sh local\r\n    ```\r\n * It'll install the BDRE scripts and artifacts in /home/openbdre/bdre\r\n\r\n### Using BDRE\r\n\r\n* After a successful build, start the BDRE UI using \r\n\r\n```shell\r\n /home/openbdre/bdre/bdre-scripts/execution/run-ui.sh\r\n```\r\n\r\n* Use *Google Chrome browser* from the host machine and open *http://VM_IP:288503/mdui/pages/content.page*\r\n* Login using admin/zaq1xsw2\r\n\r\n### Creating, Deploying and Running a Test Job\r\n\r\n* Create a RDBMS data import job from *Job Setup From Template > Import from RDBMS*\r\n* Change the JDBC URL/credentials to your local MySQL DB that contains some data.\r\n* Click *Test Connection*\r\n* Expand and select 1 table (be sure to expand the tables before selecting).\r\n* Create the jobs and see the pipeline.\r\n* Click *XML* , *Diagram* etc and check the generated Oozie workflow XML and diagram.\r\n* Search for 'Process' in the search window and open the 'Process' page\r\n* Click deploy button on process page corresponding to the process you want to deploy. ( Deploy button will show status regarding deployment of process, when you hover over the button.)\r\n* Wait for 2 minutes and the deployment will be completed by then.\r\n* After the deployment is complete and in UI the status for the process is deployed (turns green).\r\n* Click the execution button to execute the *Import job*.\r\n* Check the process in Oozie console *http://VM_IP:11000/oozie*\r\n* When the import job is complete start the *data load job*.\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}